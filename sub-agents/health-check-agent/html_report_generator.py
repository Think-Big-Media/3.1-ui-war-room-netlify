#!/usr/bin/env python3
"""
HTML Report Generator for Health Check Agent
Generates beautiful, comprehensive HTML reports with charts and visualizations
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

class HTMLReportGenerator:
    """Generate comprehensive HTML health reports"""
    
    def __init__(self):
        self.template_dir = Path(__file__).parent / "templates"
        self.template_dir.mkdir(exist_ok=True)
    
    def generate_html_report(self, report_data: Dict[str, Any], output_file: str = None) -> str:
        """Generate comprehensive HTML health report"""
        
        if output_file is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"health_report_{timestamp}.html"
        
        health_data = report_data["war_room_health_report"]
        
        html_content = self._generate_html_template(health_data)
        
        # Write to file
        report_path = Path(__file__).parent / "reports" / output_file
        report_path.parent.mkdir(exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return str(report_path)
    
    def _generate_html_template(self, health_data: Dict[str, Any]) -> str:
        """Generate the complete HTML template"""
        
        summary = health_data["summary"]
        metadata = health_data["metadata"]
        migration = health_data["migration_assessment"]
        results = health_data["detailed_results"]
        performance = health_data["performance_metrics"]
        
        # Status colors
        status_colors = {
            "EXCELLENT": "#10B981",
            "GOOD": "#059669", 
            "DEGRADED": "#F59E0B",
            "POOR": "#EF4444",
            "CRITICAL": "#DC2626"
        }
        
        overall_color = status_colors.get(summary["overall_status"], "#6B7280")
        
        # Generate chart data
        chart_data = self._generate_chart_data(results, performance)
        
        html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>War Room Health Check Report</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .status-excellent {{ background: linear-gradient(135deg, #10B981, #059669); }}
        .status-good {{ background: linear-gradient(135deg, #059669, #047857); }}
        .status-degraded {{ background: linear-gradient(135deg, #F59E0B, #D97706); }}
        .status-poor {{ background: linear-gradient(135deg, #EF4444, #DC2626); }}
        .status-critical {{ background: linear-gradient(135deg, #DC2626, #B91C1C); }}
        
        .pulse-success {{ animation: pulse-green 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }}
        .pulse-warning {{ animation: pulse-yellow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }}
        .pulse-danger {{ animation: pulse-red 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }}
        
        @keyframes pulse-green {{
            0%, 100% {{ box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7); }}
            50% {{ box-shadow: 0 0 0 10px rgba(16, 185, 129, 0); }}
        }}
        
        @keyframes pulse-yellow {{
            0%, 100% {{ box-shadow: 0 0 0 0 rgba(245, 158, 11, 0.7); }}
            50% {{ box-shadow: 0 0 0 10px rgba(245, 158, 11, 0); }}
        }}
        
        @keyframes pulse-red {{
            0%, 100% {{ box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }}
            50% {{ box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }}
        }}
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-3xl font-bold text-gray-800 mb-2">
                        <i class="fas fa-heartbeat mr-3" style="color: {overall_color}"></i>
                        War Room Health Check Report
                    </h1>
                    <p class="text-gray-600">Generated by SUB-AGENT 1 - HEALTH_CHECK_AGENT v1.0.0</p>
                </div>
                <div class="text-right">
                    <div class="text-2xl font-bold mb-1" style="color: {overall_color}">{summary["overall_status"]}</div>
                    <div class="text-sm text-gray-500">{metadata["timestamp"]}</div>
                    <div class="text-sm text-gray-500">Target: {metadata["target_url"]}</div>
                </div>
            </div>
        </div>

        <!-- Status Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 rounded-full bg-blue-500 flex items-center justify-center">
                            <i class="fas fa-tachometer-alt text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <div class="text-2xl font-bold text-gray-800">{summary["health_score"]}/100</div>
                        <div class="text-sm text-gray-600">Health Score</div>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 rounded-full {'bg-green-500 pulse-success' if migration['ready_for_migration'] else 'bg-red-500 pulse-danger'} flex items-center justify-center">
                            <i class="fas {'fa-check' if migration['ready_for_migration'] else 'fa-times'} text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <div class="text-lg font-bold {'text-green-600' if migration['ready_for_migration'] else 'text-red-600'}">
                            {migration['go_no_go_decision']}
                        </div>
                        <div class="text-sm text-gray-600">Migration Ready</div>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 rounded-full bg-green-500 flex items-center justify-center">
                            <i class="fas fa-check-circle text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <div class="text-2xl font-bold text-green-600">{summary["passed_checks"]}</div>
                        <div class="text-sm text-gray-600">Passed</div>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-12 h-12 rounded-full {'bg-yellow-500' if summary['warning_checks'] > 0 else 'bg-red-500' if summary['failed_checks'] > 0 else 'bg-gray-400'} flex items-center justify-center">
                            <i class="fas {'fa-exclamation-triangle' if summary['warning_checks'] > 0 or summary['failed_checks'] > 0 else 'fa-check'} text-white text-xl"></i>
                        </div>
                    </div>
                    <div class="ml-4">
                        <div class="text-2xl font-bold {'text-yellow-600' if summary['warning_checks'] > 0 else 'text-red-600' if summary['failed_checks'] > 0 else 'text-gray-600'}">{summary["warning_checks"] + summary["failed_checks"]}</div>
                        <div class="text-sm text-gray-600">Issues</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Migration Assessment -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-6">
                <i class="fas fa-rocket mr-3"></i>Migration Readiness Assessment
            </h2>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Decision Summary</h3>
                    <div class="p-4 rounded-lg {'bg-green-50 border border-green-200' if migration['ready_for_migration'] else 'bg-red-50 border border-red-200'}">
                        <div class="flex items-center mb-2">
                            <i class="fas {'fa-check-circle text-green-600' if migration['ready_for_migration'] else 'fa-times-circle text-red-600'} mr-2"></i>
                            <span class="font-bold {'text-green-800' if migration['ready_for_migration'] else 'text-red-800'}">{migration['go_no_go_decision']}</span>
                        </div>
                        <p class="text-sm {'text-green-700' if migration['ready_for_migration'] else 'text-red-700'}">
                            {'System is ready for production migration' if migration['ready_for_migration'] else 'System requires attention before migration'}
                        </p>
                    </div>
                </div>
                
                <div>
                    <h3 class="text-lg font-semibold text-gray-800 mb-3">Performance Metrics</h3>
                    <div class="space-y-2">
                        <div class="flex justify-between">
                            <span class="text-gray-600">Duration:</span>
                            <span class="font-semibold">{metadata['check_duration_seconds']:.2f}s</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">SLA Compliance:</span>
                            <span class="font-semibold">{performance['sla_compliance']['compliant_checks']}/{performance['sla_compliance']['total_checks']}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-600">Threshold:</span>
                            <span class="font-semibold">{performance['sla_compliance']['threshold_ms']}ms</span>
                        </div>
                    </div>
                </div>
            </div>
            
            {self._generate_issues_section(migration)}
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-4">
                    <i class="fas fa-chart-pie mr-2"></i>Health Check Results
                </h3>
                <canvas id="resultsChart" width="400" height="300"></canvas>
            </div>
            
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-xl font-bold text-gray-800 mb-4">
                    <i class="fas fa-chart-bar mr-2"></i>Response Times
                </h3>
                <canvas id="performanceChart" width="400" height="300"></canvas>
            </div>
        </div>

        <!-- Detailed Results -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
            <h2 class="text-2xl font-bold text-gray-800 mb-6">
                <i class="fas fa-list-ul mr-3"></i>Detailed Test Results
            </h2>
            
            <div class="overflow-x-auto">
                <table class="w-full table-auto">
                    <thead>
                        <tr class="bg-gray-50">
                            <th class="px-4 py-2 text-left">Component</th>
                            <th class="px-4 py-2 text-left">Status</th>
                            <th class="px-4 py-2 text-left">Response Time</th>
                            <th class="px-4 py-2 text-left">Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        {self._generate_results_table_rows(results)}
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Footer -->
        <div class="text-center text-gray-500 text-sm">
            <p>Generated by War Room Health Check Agent • {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            <p>For technical support, contact the War Room development team</p>
        </div>
    </div>

    <!-- Chart Scripts -->
    <script>
        {chart_data}
        
        // Results Pie Chart
        const resultsCtx = document.getElementById('resultsChart').getContext('2d');
        new Chart(resultsCtx, {{
            type: 'doughnut',
            data: {{
                labels: ['Passed', 'Warnings', 'Failed'],
                datasets: [{{
                    data: [{summary["passed_checks"]}, {summary["warning_checks"]}, {summary["failed_checks"]}],
                    backgroundColor: ['#10B981', '#F59E0B', '#EF4444'],
                    borderWidth: 2,
                    borderColor: '#ffffff'
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                plugins: {{
                    legend: {{
                        position: 'bottom'
                    }}
                }}
            }}
        }});

        // Performance Bar Chart
        const performanceCtx = document.getElementById('performanceChart').getContext('2d');
        new Chart(performanceCtx, {{
            type: 'bar',
            data: performanceChartData,
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                scales: {{
                    y: {{
                        beginAtZero: true,
                        title: {{
                            display: true,
                            text: 'Response Time (ms)'
                        }}
                    }}
                }},
                plugins: {{
                    legend: {{
                        display: false
                    }}
                }}
            }}
        }});
    </script>
</body>
</html>"""
        
        return html
    
    def _generate_issues_section(self, migration: Dict[str, Any]) -> str:
        """Generate issues section HTML"""
        html = ""
        
        if migration["critical_blockers"]:
            html += f"""
            <div class="mt-6">
                <h3 class="text-lg font-semibold text-red-800 mb-3">
                    <i class="fas fa-exclamation-circle mr-2"></i>Critical Issues (Must Fix)
                </h3>
                <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                    <ul class="space-y-2">
            """
            for issue in migration["critical_blockers"]:
                html += f'<li class="flex items-start"><i class="fas fa-times-circle text-red-500 mr-2 mt-0.5"></i><span class="text-red-700">{issue}</span></li>'
            html += """
                    </ul>
                </div>
            </div>
            """
        
        if migration["recommendations"]:
            html += f"""
            <div class="mt-6">
                <h3 class="text-lg font-semibold text-blue-800 mb-3">
                    <i class="fas fa-lightbulb mr-2"></i>Recommendations
                </h3>
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <ul class="space-y-2">
            """
            for rec in migration["recommendations"]:
                html += f'<li class="flex items-start"><i class="fas fa-arrow-right text-blue-500 mr-2 mt-0.5"></i><span class="text-blue-700">{rec}</span></li>'
            html += """
                    </ul>
                </div>
            </div>
            """
        
        return html
    
    def _generate_results_table_rows(self, results: List[Dict[str, Any]]) -> str:
        """Generate table rows for detailed results"""
        html = ""
        
        for result in results:
            status = result["status"]
            status_colors = {
                "pass": "bg-green-100 text-green-800",
                "warning": "bg-yellow-100 text-yellow-800", 
                "fail": "bg-red-100 text-red-800"
            }
            
            status_icons = {
                "pass": "fas fa-check-circle text-green-600",
                "warning": "fas fa-exclamation-triangle text-yellow-600",
                "fail": "fas fa-times-circle text-red-600"
            }
            
            color_class = status_colors.get(status, "bg-gray-100 text-gray-800")
            icon_class = status_icons.get(status, "fas fa-question-circle text-gray-600")
            
            # Format response time
            response_time = f"{result['response_time_ms']:.2f}ms"
            
            # Format details
            details = ""
            if result.get("error"):
                details = f"<span class='text-red-600'>{result['error']}</span>"
            elif result.get("details") and isinstance(result["details"], dict):
                key_details = []
                for k, v in result["details"].items():
                    if k in ["status_code", "success_rate_percent", "avg_response_time_ms"]:
                        key_details.append(f"{k}: {v}")
                details = "; ".join(key_details[:3])
            
            html += f"""
                <tr class="border-b border-gray-200 hover:bg-gray-50">
                    <td class="px-4 py-3 font-medium text-gray-800">{result['name']}</td>
                    <td class="px-4 py-3">
                        <span class="px-2 py-1 rounded-full text-xs font-semibold {color_class}">
                            <i class="{icon_class} mr-1"></i>{status.upper()}
                        </span>
                    </td>
                    <td class="px-4 py-3 font-mono text-sm">{response_time}</td>
                    <td class="px-4 py-3 text-sm text-gray-600">{details}</td>
                </tr>
            """
        
        return html
    
    def _generate_chart_data(self, results: List[Dict[str, Any]], performance: Dict[str, Any]) -> str:
        """Generate JavaScript chart data"""
        
        # Performance chart data
        labels = []
        data = []
        colors = []
        
        for result in results[:10]:  # Top 10 for readability
            labels.append(result["name"][:20] + "..." if len(result["name"]) > 20 else result["name"])
            data.append(result["response_time_ms"])
            
            if result["status"] == "pass":
                colors.append("#10B981")
            elif result["status"] == "warning":
                colors.append("#F59E0B")
            else:
                colors.append("#EF4444")
        
        return f"""
        const performanceChartData = {{
            labels: {json.dumps(labels)},
            datasets: [{{
                label: 'Response Time (ms)',
                data: {json.dumps(data)},
                backgroundColor: {json.dumps(colors)},
                borderColor: {json.dumps(colors)},
                borderWidth: 1
            }}]
        }};
        """

def main():
    """Test the HTML report generator"""
    # Sample data for testing
    sample_data = {
        "war_room_health_report": {
            "metadata": {
                "agent": "SUB-AGENT 1 - HEALTH_CHECK_AGENT",
                "version": "1.0.0",
                "target_url": "https://war-room-oa9t.onrender.com",
                "timestamp": datetime.now().isoformat(),
                "check_duration_seconds": 15.5
            },
            "summary": {
                "overall_status": "GOOD",
                "health_score": 85,
                "migration_ready": True,
                "total_checks": 10,
                "passed_checks": 8,
                "warning_checks": 2,
                "failed_checks": 0
            },
            "migration_assessment": {
                "ready_for_migration": True,
                "critical_blockers": [],
                "recommendations": ["Optimize API response times", "Review SSL certificate"],
                "go_no_go_decision": "GO"
            },
            "detailed_results": [
                {
                    "name": "Site Availability",
                    "status": "pass",
                    "response_time_ms": 1200.5,
                    "details": {"status_code": 200},
                    "error": None
                },
                {
                    "name": "Performance Benchmark",
                    "status": "warning", 
                    "response_time_ms": 3200.0,
                    "details": {"avg_response_time_ms": 3200},
                    "error": "Slow response time"
                }
            ],
            "performance_metrics": {
                "sla_compliance": {
                    "threshold_ms": 3000,
                    "compliant_checks": 8,
                    "total_checks": 10
                }
            }
        }
    }
    
    generator = HTMLReportGenerator()
    report_path = generator.generate_html_report(sample_data)
    print(f"Sample report generated: {report_path}")

if __name__ == "__main__":
    main()